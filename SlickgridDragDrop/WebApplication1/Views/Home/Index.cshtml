@{
    ViewBag.Title = "Home Page";
}

<div style="position:relative; display: inline-block;">
    <div style="width:600px;">
        <div class="grid-header" style="width:100%">
            <label>TODO list:</label>
        </div>
        <div id="myGrid" style="width:100%;height:500px;"></div>
    </div>
</div>

<div style="position:absolute;top: 8px;right: 8px;">
    <div style="width:600px;">
        <div id="grid2Header" class="grid-header" style="width:100%">
            <label>TODO list:</label>
        </div>
        <div id="myGrid2" style="width:100%;height:500px;"></div>
    </div>
</div>

<script type="text/javascript">
    jQuery(document).ready(function () {
        var grid, grid2;
        var data = [];
        var columns = [
          {
              id: "#",
              name: "",
              width: 97,
              behavior: "selectAndMove",
              selectable: false,
              resizable: false,
              cssClass: "cell-reorder dnd"
          },
          {
              id: "name",
              name: "Name",
              field: "name",
              width: 497,
              cssClass: "cell-title",
              editor: Slick.Editors.Text,
              validator: requiredFieldValidator
          }
        ];
        var options = {
            editable: true,
            enableCellNavigation: true,
            forceFitColumns: true,
            autoEdit: false
        };
        function requiredFieldValidator(value) {
            if (value == null || value == undefined || !value.length) {
                return { valid: false, msg: "This is a required field" };
            } else {
                return { valid: true, msg: null };
            }
        }
        $(function () {
            data = [
              { name: "Make a list", complete: true },
              { name: "Check it twice", complete: false },
              { name: "Find out who's naughty", complete: false },
              { name: "Find out who's nice", complete: false }
            ];
            data2 = [
              { name: "Complete a feature", complete: true },
              { name: "Review a feature", complete: false },
              { name: "Open browser", complete: false },
            ];
            grid = new Slick.Grid("#myGrid", data, columns, options);
            grid2 = new Slick.Grid("#myGrid2", data2, columns, options);
            grid.setSelectionModel(new Slick.RowSelectionModel());
            var moveRowsPlugin = new Slick.RowMoveManager({
                cancelEditOnDrag: true
            });
            moveRowsPlugin.onBeforeMoveRows.subscribe(function (e, data) {
                for (var i = 0; i < data.rows.length; i++) {
                    // no point in moving before or after itself
                    if (data.rows[i] == data.insertBefore || data.rows[i] == data.insertBefore - 1) {
                        e.stopPropagation();
                        return false;
                    }
                }
                return true;
            });
            moveRowsPlugin.onMoveRows.subscribe(function (e, args) {
                var extractedRows = [], left, right;
                var rows = args.rows;
                var insertBefore = args.insertBefore;
                left = data.slice(0, insertBefore);
                right = data.slice(insertBefore, data.length);
                rows.sort(function (a, b) { return a - b; });
                for (var i = 0; i < rows.length; i++) {
                    extractedRows.push(data[rows[i]]);
                }
                rows.reverse();
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row < insertBefore) {
                        left.splice(row, 1);
                    } else {
                        right.splice(row - insertBefore, 1);
                    }
                }
                data = left.concat(extractedRows.concat(right));
                var selectedRows = [];
                for (var i = 0; i < rows.length; i++)
                    selectedRows.push(left.length + i);
                grid.resetActiveCell();
                grid.setData(data);
                grid.setSelectedRows(selectedRows);
                grid.render();
            });
            grid.registerPlugin(moveRowsPlugin);
            grid.onDragInit.subscribe(function (e, dd) {
                // prevent the grid from cancelling drag'n'drop by default
                e.stopImmediatePropagation();
            });
            grid.onDragStart.subscribe(function (e, dd) {
                var cell = grid.getCellFromEvent(e);
                if (!cell) {
                    return;
                }
                dd.row = cell.row;
                if (!data[dd.row]) {
                    return;
                }
                if (Slick.GlobalEditorLock.isActive()) {
                    return;
                }
                e.stopImmediatePropagation();
                var selectedRows = grid.getSelectedRows();
                if (!selectedRows.length || $.inArray(dd.row, selectedRows) == -1) {
                    selectedRows = [dd.row];
                    grid.setSelectedRows(selectedRows);
                }
                dd.rows = selectedRows;
                dd.count = selectedRows.length;
                var proxy = $("<span></span>")
                    .css({
                        position: "absolute",
                        display: "inline-block",
                        padding: "4px 10px",
                        background: "#e0e0e0",
                        border: "1px solid gray",
                        "z-index": 99999,
                        "-moz-border-radius": "8px",
                        "-moz-box-shadow": "2px 2px 6px silver"
                    })
                    .text("Drag to grid to save " + dd.count + " selected row(s)")
                    .appendTo("body");
                dd.helper = proxy;
                return proxy;
            });
            grid.onDrag.subscribe(function (e, dd) {
                dd.helper.css({ top: e.pageY + 5, left: e.pageX + 5 });
            });
            grid.onDragEnd.subscribe(function (e, dd) {
                dd.helper.remove();
            });
            $.drop({ mode: "mouse" });

            $("#myGrid2 .slick-viewport")
                .bind("dropstart", function (e, dd) {
                    console.log('yellow');
                })
                .bind("dropend", function (e, dd) {
                    console.log('pink');
                })
                .bind("drop", function (e, dd) {
                    console.log("Drop in ");
                    if (dd.rows.length > 0) {
                        dd.rows.forEach(function (row) {
                            var item = dd.grid.getDataItem(row);
                            console.log('Working with ' + item);
                            data2.push(item);
                        })
                    }

                    grid2.invalidate();
                    dd.rows.forEach(function (row) {
                        data.splice(row, 1);
                    });
                    grid.invalidate();
                });
            grid.onAddNewRow.subscribe(function (e, args) {
                var item = { name: "New task", complete: false };
                $.extend(item, args.item);
                data.push(item);
                grid.invalidateRows([data.length - 1]);
                grid.updateRowCount();
                grid.render();
            });
        });
    });
</script>
